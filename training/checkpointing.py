#!/usr/bin/env python3
"""
Oracle850B Checkpointing
–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è + –∏–Ω–¥–µ–∫—Å —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import os
import json
import shutil
import hashlib
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime


class OracleCheckpointManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤ Oracle850B"""
    
    def __init__(self, checkpoint_dir: str = "checkpoints/oracle850b", 
                 s3_mirror: bool = True, keep_last: int = 5):
        self.checkpoint_dir = Path(checkpoint_dir)
        self.s3_mirror = s3_mirror
        self.keep_last = keep_last
        self.index_file = self.checkpoint_dir / "checkpoint_index.json"
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.checkpoint_dir.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        self.index = self._load_index()
    
    def _load_index(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤"""
        if self.index_file.exists():
            with open(self.index_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            "checkpoints": [],
            "latest": None,
            "best": None,
            "metadata": {
                "created": datetime.now().isoformat(),
                "version": "0.1.0"
            }
        }
    
    def _save_index(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å"""
        with open(self.index_file, 'w', encoding='utf-8') as f:
            json.dump(self.index, f, indent=2, ensure_ascii=False)
    
    def _calculate_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    
    def create_checkpoint(self, step: int, model_state: Dict[str, Any], 
                         optimizer_state: Dict[str, Any], 
                         metrics: Dict[str, float]) -> str:
        """–°–æ–∑–¥–∞—Ç—å —á–µ–∫–ø–æ–π–Ω—Ç"""
        
        checkpoint_name = f"oracle850b-step-{step:06d}"
        checkpoint_path = self.checkpoint_dir / checkpoint_name
        checkpoint_path.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_file = checkpoint_path / "model.pt"
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç torch.save(model_state, model_file)
        with open(model_file, 'w') as f:
            json.dump({"step": step, "model_state": "mock"}, f)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        optimizer_file = checkpoint_path / "optimizer.pt"
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç torch.save(optimizer_state, optimizer_file)
        with open(optimizer_file, 'w') as f:
            json.dump({"step": step, "optimizer_state": "mock"}, f)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        metrics_file = checkpoint_path / "metrics.json"
        with open(metrics_file, 'w', encoding='utf-8') as f:
            json.dump(metrics, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ–∫–ø–æ–π–Ω—Ç–∞
        checkpoint_meta = {
            "name": checkpoint_name,
            "step": step,
            "path": str(checkpoint_path),
            "created": datetime.now().isoformat(),
            "size_mb": self._get_directory_size(checkpoint_path),
            "checksum": self._calculate_checksum(model_file),
            "metrics": metrics
        }
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        self.index["checkpoints"].append(checkpoint_meta)
        self.index["latest"] = checkpoint_name
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ª—É—á—à–∏–π —á–µ–∫–ø–æ–π–Ω—Ç (–ø–æ loss)
        if "loss" in metrics:
            if (self.index["best"] is None or 
                metrics["loss"] < self.index["checkpoints"][-1].get("metrics", {}).get("loss", float('inf'))):
                self.index["best"] = checkpoint_name
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫–ø–æ–π–Ω—Ç—ã
        self._cleanup_old_checkpoints()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        self._save_index()
        
        # S3 mirror (–º–æ–∫)
        if self.s3_mirror:
            self._mirror_to_s3(checkpoint_name)
        
        return checkpoint_name
    
    def _get_directory_size(self, path: Path) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ MB"""
        total_size = 0
        for file_path in path.rglob('*'):
            if file_path.is_file():
                total_size += file_path.stat().st_size
        return total_size / (1024 * 1024)
    
    def _cleanup_old_checkpoints(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫–ø–æ–π–Ω—Ç—ã"""
        if len(self.index["checkpoints"]) <= self.keep_last:
            return
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —à–∞–≥—É
        checkpoints = sorted(self.index["checkpoints"], 
                           key=lambda x: x["step"], reverse=True)
        
        # –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ
        for checkpoint in checkpoints[self.keep_last:]:
            checkpoint_path = Path(checkpoint["path"])
            if checkpoint_path.exists():
                shutil.rmtree(checkpoint_path)
                print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —á–µ–∫–ø–æ–π–Ω—Ç: {checkpoint['name']}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        self.index["checkpoints"] = checkpoints[:self.keep_last]
    
    def _mirror_to_s3(self, checkpoint_name: str):
        """–ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ S3 (–º–æ–∫)"""
        print(f"üîÑ –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ {checkpoint_name} –≤ S3...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç boto3
        pass
    
    def load_checkpoint(self, checkpoint_name: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–ø–æ–π–Ω—Ç"""
        checkpoint_path = self.checkpoint_dir / checkpoint_name
        
        if not checkpoint_path.exists():
            raise FileNotFoundError(f"–ß–µ–∫–ø–æ–π–Ω—Ç {checkpoint_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ù–∞–π—Ç–∏ –≤ –∏–Ω–¥–µ–∫—Å–µ
        checkpoint_meta = None
        for cp in self.index["checkpoints"]:
            if cp["name"] == checkpoint_name:
                checkpoint_meta = cp
                break
        
        if not checkpoint_meta:
            raise ValueError(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ–∫–ø–æ–π–Ω—Ç–∞ {checkpoint_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return {
            "path": checkpoint_path,
            "step": checkpoint_meta["step"],
            "metrics": checkpoint_meta["metrics"],
            "created": checkpoint_meta["created"]
        }
    
    def list_checkpoints(self) -> List[Dict[str, Any]]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤"""
        return self.index["checkpoints"]
    
    def get_latest_checkpoint(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–ø–æ–π–Ω—Ç"""
        return self.index["latest"]
    
    def get_best_checkpoint(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —á–µ–∫–ø–æ–π–Ω—Ç"""
        return self.index["best"]


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤"""
    manager = OracleCheckpointManager()
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫–ø–æ–π–Ω—Ç
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–µ–∫–ø–æ–π–Ω—Ç–∞...")
    checkpoint_name = manager.create_checkpoint(
        step=1000,
        model_state={"mock": "data"},
        optimizer_state={"mock": "data"},
        metrics={"loss": 2.5, "accuracy": 0.85}
    )
    
    print(f"–°–æ–∑–¥–∞–Ω —á–µ–∫–ø–æ–π–Ω—Ç: {checkpoint_name}")
    print(f"–°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤: {[cp['name'] for cp in manager.list_checkpoints()]}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {manager.get_latest_checkpoint()}")
    print(f"–õ—É—á—à–∏–π: {manager.get_best_checkpoint()}")


if __name__ == "__main__":
    main()
