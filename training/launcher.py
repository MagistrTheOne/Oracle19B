#!/usr/bin/env python3
"""
Oracle850B Training Launcher
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ TP/PP/SP, elastic resume, dry-run
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import os
import sys
import json
import yaml
import argparse
import subprocess
from pathlib import Path
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append(str(Path(__file__).parent.parent / "scripts"))

from guard_no_local_train import check_local_train_guard


class OracleTrainingLauncher:
    """–õ–∞—É–Ω—á–µ—Ä –æ–±—É—á–µ–Ω–∏—è Oracle850B"""
    
    def __init__(self, config_path: str):
        self.config_path = Path(config_path)
        self.config = self._load_config()
        self.parallelism = self.config.get("parallelism", {})
        
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –æ–±—É—á–µ–Ω–∏—è"""
        with open(self.config_path, 'r', encoding='utf-8') as f:
            if self.config_path.suffix == '.yaml':
                return yaml.safe_load(f)
            else:
                return json.load(f)
    
    def _check_guards(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–≤–∞—Ä–¥—ã –ø—Ä–æ—Ç–∏–≤ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        check_local_train_guard()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if os.getenv("ALLOW_LOCAL_TRAIN", "false").lower() != "true":
            print("‚ùå –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ Oracle850B –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ —Å TP/PP/SP")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ALLOW_LOCAL_TRAIN=true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            sys.exit(1)
    
    def _build_parallelism_layout(self) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        tp = self.parallelism.get("tensor", 1)
        pp = self.parallelism.get("pipeline", 1) 
        sp = self.parallelism.get("sequence", False)
        
        total_gpus = tp * pp
        if sp:
            total_gpus *= 2  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è SP
        
        layout = {
            "tensor_parallel_size": tp,
            "pipeline_parallel_size": pp,
            "sequence_parallel": sp,
            "total_gpus": total_gpus,
            "world_size": total_gpus
        }
        
        return layout
    
    def _validate_cluster_setup(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ (dry-run)"""
        layout = self._build_parallelism_layout()
        
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞:")
        print(f"  Tensor Parallel: {layout['tensor_parallel_size']}")
        print(f"  Pipeline Parallel: {layout['pipeline_parallel_size']}")
        print(f"  Sequence Parallel: {layout['sequence_parallel']}")
        print(f"  Total GPUs: {layout['total_gpus']}")
        print(f"  World Size: {layout['world_size']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU
        try:
            result = subprocess.run(["nvidia-smi", "--list-gpus"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                gpu_count = len(result.stdout.strip().split('\n'))
                print(f"  –î–æ—Å—Ç—É–ø–Ω–æ GPU: {gpu_count}")
                if gpu_count < layout['total_gpus']:
                    print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GPU: —Ç—Ä–µ–±—É–µ—Ç—Å—è {layout['total_gpus']}, –¥–æ—Å—Ç—É–ø–Ω–æ {gpu_count}")
                    return False
            else:
                print("‚ö†Ô∏è  nvidia-smi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
        
        return True
    
    def _build_accelerate_command(self) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—É accelerate launch"""
        layout = self._build_parallelism_layout()
        
        cmd = [
            "accelerate", "launch",
            "--config_file", "configs/accelerate/cluster.yaml",
            "--num_processes", str(layout['world_size']),
            "--main_process_port", "29500"
        ]
        
        return cmd
    
    def _build_training_command(self) -> List[str]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–±—É—á–µ–Ω–∏—è"""
        cmd = [
            "python", "training/train.py",
            "--config", str(self.config_path),
            "--model_config", "configs/model/oracle850b.moe.json",
            "--deepspeed_config", "configs/deepspeed/zero3_offload.json"
        ]
        
        return cmd
    
    def dry_run(self):
        """Dry-run: –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
        print("üöÄ Oracle850B Training Launcher - DRY RUN")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–≤–∞—Ä–¥–æ–≤
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–≤–∞—Ä–¥–æ–≤...")
        self._check_guards()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        print("\n2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞...")
        if not self._validate_cluster_setup():
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        print("\n3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        accelerate_cmd = self._build_accelerate_command()
        train_cmd = self._build_training_command()
        
        print(f"Accelerate: {' '.join(accelerate_cmd)}")
        print(f"Training: {' '.join(train_cmd)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
        config_files = [
            "configs/model/oracle850b.moe.json",
            "configs/deepspeed/zero3_offload.json", 
            "configs/accelerate/cluster.yaml"
        ]
        
        for config_file in config_files:
            if Path(config_file).exists():
                print(f"  ‚úÖ {config_file}")
            else:
                print(f"  ‚ùå {config_file} - –ù–ï –ù–ê–ô–î–ï–ù")
                return False
        
        print("\n‚úÖ Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --execute")
        return True
    
    def execute(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        print("üöÄ Oracle850B Training Launcher - EXECUTE")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–≤–∞—Ä–¥–æ–≤
        self._check_guards()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self._validate_cluster_setup():
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        accelerate_cmd = self._build_accelerate_command()
        train_cmd = self._build_training_command()
        
        full_cmd = accelerate_cmd + train_cmd
        
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {' '.join(full_cmd)}")
        
        try:
            result = subprocess.run(full_cmd, check=True)
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(description="Oracle850B Training Launcher")
    parser.add_argument("--config", required=True, help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –æ–±—É—á–µ–Ω–∏—è")
    parser.add_argument("--dry-run", action="store_true", help="Dry-run –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--execute", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    args = parser.parse_args()
    
    launcher = OracleTrainingLauncher(args.config)
    
    if args.dry_run:
        success = launcher.dry_run()
        sys.exit(0 if success else 1)
    elif args.execute:
        success = launcher.execute()
        sys.exit(0 if success else 1)
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ --dry-run –∏–ª–∏ --execute")
        sys.exit(1)


if __name__ == "__main__":
    main()
