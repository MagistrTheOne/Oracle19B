name: Dataset Schema Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'datasets/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'datasets/**'

jobs:
  validate-dataset-schema:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install jsonschema

    - name: Validate dataset schema
      run: |
        echo "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –¥–∞—Ç–∞—Å–µ—Ç–∞..."

        # –°—Ö–µ–º–∞ –¥–ª—è ChatML JSONL
        cat > dataset_schema.json << 'EOF'
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "description": "–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º oracle_sys"
            },
            "messages": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": ["user", "assistant"]
                  },
                  "content": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["role", "content"]
              },
              "minItems": 1
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "difficulty": {
              "type": "string",
              "enum": ["easy", "medium", "hard"]
            },
            "source": {
              "type": "string"
            }
          },
          "required": ["system", "messages", "tags", "difficulty", "source"]
        }
        EOF

        # –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        validate_file() {
          local file="$1"
          if [ ! -f "$file" ]; then
            echo "‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
            return 0
          fi

          echo "  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: $file"

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
          if ! python3 -c "
          import json, sys
          try:
            with open('$file', 'r', encoding='utf-8') as f:
              for i, line in enumerate(f, 1):
                data = json.loads(line.strip())
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
                system = data.get('system', '')
                if '<|oracle_sys|>' not in system:
                  print(f'‚ùå –°—Ç—Ä–æ–∫–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <|oracle_sys|> –≤ system')
                  sys.exit(1)
          except json.JSONDecodeError as e:
            print(f'‚ùå –°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON - {e}')
            sys.exit(1)
          except Exception as e:
            print(f'‚ùå –°—Ç—Ä–æ–∫–∞ {i}: –æ—à–∏–±–∫–∞ - {e}')
            sys.exit(1)
          " 2>/dev/null; then
            echo "‚ùå –§–∞–π–ª $file –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            return 1
          fi

          # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã —á–µ—Ä–µ–∑ jsonschema
          if ! python3 -c "
          import json
          from jsonschema import validate, ValidationError

          schema = json.load(open('dataset_schema.json'))
          errors = []

          with open('$file', 'r', encoding='utf-8') as f:
            for i, line in enumerate(f, 1):
              try:
                data = json.loads(line.strip())
                validate(instance=data, schema=schema)
              except ValidationError as e:
                errors.append(f'–°—Ç—Ä–æ–∫–∞ {i}: {e.message}')
              except Exception as e:
                errors.append(f'–°—Ç—Ä–æ–∫–∞ {i}: {str(e)}')

          if errors:
            print('\n'.join(errors))
            exit(1)
          " 2>/dev/null; then
            echo "‚ùå –§–∞–π–ª $file –Ω–µ –ø—Ä–æ—à—ë–ª —Å—Ö–µ–º–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            return 1
          fi

          echo "‚úÖ –§–∞–π–ª $file –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é"
          return 0
        }

        # –ü–æ–∏—Å–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è JSONL —Ñ–∞–π–ª–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
        exit_code=0

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ datasets/mix/
        for file in datasets/mix/*.jsonl; do
          if [ -f "$file" ]; then
            if ! validate_file "$file"; then
              exit_code=1
            fi
          fi
        done

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ data/ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for file in data/**/*.jsonl; do
          if [ -f "$file" ]; then
            if ! validate_file "$file"; then
              exit_code=1
            fi
          fi
        done

        if [ $exit_code -eq 0 ]; then
          echo "‚úÖ –í—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã"
        else
          echo "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
          exit 1
        fi

    - name: Check identity tokens presence
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏..."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if ! find datasets/ -name "*.jsonl" -exec grep -l "<|oracle_sys|>" {} \; | head -1 > /dev/null; then
          echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ç–æ–∫–µ–Ω–æ–º <|oracle_sys|>"
          exit 1
        fi

        # –ü–æ–¥—Å—á—ë—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏:"
        echo "  <|oracle_sys|>: $(find datasets/ -name "*.jsonl" -exec grep -c "<|oracle_sys|>" {} \; | awk '{sum+=$1} END {print sum}')"
        echo "  <|oracle_intro|>: $(find datasets/ -name "*.jsonl" -exec grep -c "<|oracle_intro|>" {} \; | awk '{sum+=$1} END {print sum}')"
        echo "  <|author|>: $(find datasets/ -name "*.jsonl" -exec grep -c "<|author|>" {} \; | awk '{sum+=$1} END {print sum}')"

        echo "‚úÖ –¢–æ–∫–µ–Ω—ã –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö"
