#!/usr/bin/env python3
"""
Oracle850B Seed Evaluation Dry-Run
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –±–µ–∑ –≤–µ—Å–æ–≤
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import os
import sys
import json
import argparse
from pathlib import Path
from typing import Dict, List, Any
import subprocess

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append(str(Path(__file__).parent.parent / "datasets" / "scripts"))


class OracleSeedEvalDryRun:
    """Dry-run –¥–ª—è seed evaluation Oracle850B"""
    
    def __init__(self, output_dir: str = "data/seed_eval"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.manifest = {
            "datasets": [
                {
                    "name": "gsm8k",
                    "url": "https://huggingface.co/datasets/gsm8k",
                    "type": "math_reasoning",
                    "samples": 100
                },
                {
                    "name": "humaneval",
                    "url": "https://huggingface.co/datasets/humaneval",
                    "type": "code_generation",
                    "samples": 50
                },
                {
                    "name": "mmlu",
                    "url": "https://huggingface.co/datasets/mmlu",
                    "type": "knowledge_qa",
                    "samples": 200
                }
            ],
            "eval_tasks": [
                "math_reasoning",
                "code_generation", 
                "knowledge_qa",
                "common_sense",
                "reading_comprehension"
            ]
        }
    
    def create_manifest(self) -> Path:
        """–°–æ–∑–¥–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è dry-run"""
        manifest_path = self.output_dir / "seed_manifest.json"
        
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(self.manifest, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {manifest_path}")
        return manifest_path
    
    def run_ingest_dryrun(self) -> bool:
        """Dry-run –∏–Ω–≥—Ä–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç Dry-run –∏–Ω–≥—Ä–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ URL
            test_urls = [
                "https://example.com/math_problems.txt",
                "https://example.com/code_tasks.txt",
                "https://example.com/qa_pairs.txt"
            ]
            
            cmd = [
                "python", "datasets/scripts/ingest.py",
                "--dry-run",
                "--max-files", "3",
                "--output-dir", str(self.output_dir / "raw")
            ] + test_urls
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            print("  ‚úÖ –ò–Ω–≥—Ä–µ—Å—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω (dry-run)")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'raw'}")
            print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: 3")
            print(f"  üìà –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ~15MB")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≥—Ä–µ—Å—Ç–∞: {e}")
            return False
    
    def run_clean_dryrun(self) -> bool:
        """Dry-run –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç Dry-run –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            cmd = [
                "python", "datasets/scripts/clean_generic.py",
                "--dry-run",
                "--sample", "1000",
                "--input-dir", str(self.output_dir / "raw"),
                "--output-dir", str(self.output_dir / "clean")
            ]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
            print("  ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ (dry-run)")
            print(f"  üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'raw'}")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'clean'}")
            print(f"  üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ~150")
            print(f"  üìä –û—á–∏—â–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ~2.5M")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False
    
    def run_decontaminate_dryrun(self) -> bool:
        """Dry-run –¥–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏"""
        print("üîç Dry-run –¥–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏...")
        
        try:
            # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ eval —Å–ø–∏—Å–∫–∏
            eval_lists_dir = self.output_dir / "eval_lists"
            eval_lists_dir.mkdir(exist_ok=True)
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ eval —Å–ø–∏—Å–∫–∏
            eval_files = {
                "gsm8k_test.txt": ["What is 2+2?", "Solve: 5*3"],
                "humaneval_test.txt": ["def fibonacci(n):", "def sort_list(lst):"],
                "mmlu_test.txt": ["What is the capital of France?", "Who wrote Hamlet?"]
            }
            
            for filename, content in eval_files.items():
                with open(eval_lists_dir / filename, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(content))
            
            cmd = [
                "python", "datasets/scripts/decontaminate.py",
                "--dry-run",
                "--eval-lists", str(eval_lists_dir),
                "--input-dir", str(self.output_dir / "clean"),
                "--output-dir", str(self.output_dir / "decontaminated")
            ]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –¥–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏
            print("  ‚úÖ –î–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ (dry-run)")
            print(f"  üìÅ Eval —Å–ø–∏—Å–∫–∏: {eval_lists_dir}")
            print(f"  üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'clean'}")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'decontaminated'}")
            print(f"  üö´ –£–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ~25")
            print(f"  üìä –û—Å—Ç–∞–ª–æ—Å—å —á–∏—Å—Ç—ã—Ö: ~975")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏: {e}")
            return False
    
    def run_shard_dryrun(self) -> bool:
        """Dry-run —à–∞—Ä–¥–∏–Ω–≥–∞ –≤ WebDataset"""
        print("üîç Dry-run —à–∞—Ä–¥–∏–Ω–≥–∞ WebDataset...")
        
        try:
            cmd = [
                "python", "datasets/scripts/shard_webdataset.py",
                "--dry-run",
                "--input-dir", str(self.output_dir / "decontaminated"),
                "--output-dir", str(self.output_dir / "webdataset"),
                "--shard-size", "512MB",
                "--split", "train"
            ]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —à–∞—Ä–¥–∏–Ω–≥–∞
            print("  ‚úÖ –®–∞—Ä–¥–∏–Ω–≥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω (dry-run)")
            print(f"  üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'decontaminated'}")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'webdataset'}")
            print(f"  üì¶ –°–æ–∑–¥–∞–Ω–æ —à–∞—Ä–¥–æ–≤: 3")
            print(f"  üìä –†–∞–∑–º–µ—Ä —à–∞—Ä–¥–∞: ~512MB")
            print(f"  üéØ –§–æ—Ä–º–∞—Ç: WebDataset")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∞—Ä–¥–∏–Ω–≥–∞: {e}")
            return False
    
    def run_stats_dryrun(self) -> bool:
        """Dry-run —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç Dry-run —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            cmd = [
                "python", "datasets/scripts/stats.py",
                "--dry-run",
                "--input-dir", str(self.output_dir / "decontaminated"),
                "--output-dir", str(self.output_dir / "stats"),
                "--quality-report"
            ]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = {
                "total_samples": 975,
                "total_tokens": 2500000,
                "avg_length": 2567,
                "quality_score": 0.87,
                "languages": {"en": 0.85, "ru": 0.15},
                "domains": {
                    "math": 0.3,
                    "code": 0.25,
                    "qa": 0.25,
                    "general": 0.2
                }
            }
            
            stats_file = self.output_dir / "stats" / "quality_report.json"
            stats_file.parent.mkdir(exist_ok=True)
            
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
            
            print("  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ (dry-run)")
            print(f"  üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'decontaminated'}")
            print(f"  üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir / 'stats'}")
            print(f"  üìä –û–±—Ä–∞–∑—Ü–æ–≤: {stats['total_samples']}")
            print(f"  üìà –¢–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']:,}")
            print(f"  üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {stats['avg_length']}")
            print(f"  ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {stats['quality_score']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def create_mistake_book(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å mistake-book –∏–∑ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç –º–æ–¥–µ–ª–∏"""
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ mistake-book...")
        
        try:
            mistake_book = {
                "version": "1.0",
                "created": "2024-12-19",
                "total_mistakes": 0,
                "categories": {
                    "math_reasoning": {
                        "description": "–û—à–∏–±–∫–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö",
                        "examples": [
                            {
                                "problem": "–†–µ—à–∏—Ç–µ: 2x + 5 = 13",
                                "wrong_answer": "x = 3",
                                "correct_answer": "x = 4",
                                "mistake_type": "arithmetic_error"
                            }
                        ]
                    },
                    "code_generation": {
                        "description": "–û—à–∏–±–∫–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞",
                        "examples": [
                            {
                                "problem": "–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞",
                                "wrong_answer": "def sort(lst): return lst",
                                "correct_answer": "def sort(lst): return sorted(lst)",
                                "mistake_type": "logic_error"
                            }
                        ]
                    },
                    "knowledge_qa": {
                        "description": "–û—à–∏–±–∫–∏ –≤ –∑–Ω–∞–Ω–∏—è—Ö –∏ —Ñ–∞–∫—Ç–∞—Ö",
                        "examples": [
                            {
                                "problem": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
                                "wrong_answer": "–õ–æ–Ω–¥–æ–Ω",
                                "correct_answer": "–ü–∞—Ä–∏–∂",
                                "mistake_type": "factual_error"
                            }
                        ]
                    }
                }
            }
            
            mistake_book_file = self.output_dir / "mistake_book.json"
            with open(mistake_book_file, 'w', encoding='utf-8') as f:
                json.dump(mistake_book, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Mistake-book —Å–æ–∑–¥–∞–Ω: {mistake_book_file}")
            print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ—à–∏–±–æ–∫: {len(mistake_book['categories'])}")
            print(f"üìù –ü—Ä–∏–º–µ—Ä–æ–≤ –æ—à–∏–±–æ–∫: {sum(len(cat['examples']) for cat in mistake_book['categories'].values())}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è mistake-book: {e}")
            return False
    
    def create_spec_synthetic(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å spec-synthetic —Å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏"""
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ spec-synthetic...")
        
        try:
            spec_synthetic = {
                "version": "1.0",
                "created": "2024-12-19",
                "total_tasks": 0,
                "test_categories": {
                    "math_synthetic": {
                        "description": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
                        "generator": "python_math_generator",
                        "tests": [
                            {
                                "name": "basic_arithmetic",
                                "generator": "generate_arithmetic(level='basic')",
                                "oracle": "eval_arithmetic_result",
                                "test_cases": 50
                            },
                            {
                                "name": "algebra_solving",
                                "generator": "generate_algebra(level='intermediate')",
                                "oracle": "eval_algebra_solution",
                                "test_cases": 30
                            }
                        ]
                    },
                    "code_synthetic": {
                        "description": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                        "generator": "python_code_generator",
                        "tests": [
                            {
                                "name": "function_generation",
                                "generator": "generate_function_task(complexity='medium')",
                                "oracle": "eval_function_correctness",
                                "test_cases": 40
                            },
                            {
                                "name": "algorithm_implementation",
                                "generator": "generate_algorithm_task(domain='sorting')",
                                "oracle": "eval_algorithm_performance",
                                "test_cases": 25
                            }
                        ]
                    }
                }
            }
            
            spec_file = self.output_dir / "spec_synthetic.json"
            with open(spec_file, 'w', encoding='utf-8') as f:
                json.dump(spec_synthetic, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Spec-synthetic —Å–æ–∑–¥–∞–Ω: {spec_file}")
            print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: {len(spec_synthetic['test_categories'])}")
            total_tests = sum(
                sum(test['test_cases'] for test in cat['tests'])
                for cat in spec_synthetic['test_categories'].values()
            )
            print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤: {total_tests}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è spec-synthetic: {e}")
            return False
    
    def run_full_dryrun(self) -> bool:
        """–ü–æ–ª–Ω—ã–π dry-run –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
        print("üöÄ Oracle850B Seed Evaluation Dry-Run")
        print("=" * 50)
        
        success = True
        
        # 1. –°–æ–∑–¥–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...")
        self.create_manifest()
        
        # 2. –ò–Ω–≥—Ä–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö
        print("\n2. –ò–Ω–≥—Ä–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö...")
        if not self.run_ingest_dryrun():
            success = False
        
        # 3. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\n3. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        if not self.run_clean_dryrun():
            success = False
        
        # 4. –î–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏—è
        print("\n4. –î–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏—è...")
        if not self.run_decontaminate_dryrun():
            success = False
        
        # 5. –®–∞—Ä–¥–∏–Ω–≥
        print("\n5. –®–∞—Ä–¥–∏–Ω–≥ WebDataset...")
        if not self.run_shard_dryrun():
            success = False
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        if not self.run_stats_dryrun():
            success = False
        
        # 7. Mistake-book
        print("\n7. –°–æ–∑–¥–∞–Ω–∏–µ mistake-book...")
        if not self.create_mistake_book():
            success = False
        
        # 8. Spec-synthetic
        print("\n8. –°–æ–∑–¥–∞–Ω–∏–µ spec-synthetic...")
        if not self.create_spec_synthetic():
            success = False
        
        if success:
            print("\n‚úÖ Seed evaluation dry-run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {self.output_dir}")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∏ –≤ seed evaluation dry-run")
        
        return success


def main():
    parser = argparse.ArgumentParser(description="Oracle850B Seed Evaluation Dry-Run")
    parser.add_argument("--output-dir", default="data/seed_eval", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞")
    parser.add_argument("--ingest", action="store_true", help="–¢–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ—Å—Ç")
    parser.add_argument("--clean", action="store_true", help="–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞")
    parser.add_argument("--decontaminate", action="store_true", help="–¢–æ–ª—å–∫–æ –¥–µ-–∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏—è")
    parser.add_argument("--shard", action="store_true", help="–¢–æ–ª—å–∫–æ —à–∞—Ä–¥–∏–Ω–≥")
    parser.add_argument("--stats", action="store_true", help="–¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    parser.add_argument("--mistake-book", action="store_true", help="–¢–æ–ª—å–∫–æ mistake-book")
    parser.add_argument("--spec-synthetic", action="store_true", help="–¢–æ–ª—å–∫–æ spec-synthetic")
    
    args = parser.parse_args()
    
    dryrun = OracleSeedEvalDryRun(args.output_dir)
    
    if args.ingest:
        success = dryrun.run_ingest_dryrun()
    elif args.clean:
        success = dryrun.run_clean_dryrun()
    elif args.decontaminate:
        success = dryrun.run_decontaminate_dryrun()
    elif args.shard:
        success = dryrun.run_shard_dryrun()
    elif args.stats:
        success = dryrun.run_stats_dryrun()
    elif args.mistake_book:
        success = dryrun.create_mistake_book()
    elif args.spec_synthetic:
        success = dryrun.create_spec_synthetic()
    else:
        success = dryrun.run_full_dryrun()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
