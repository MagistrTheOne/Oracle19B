#!/usr/bin/env python3
"""
Oracle850B Mini-Config Generator
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è smoke testing –Ω–∞ RunPod
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import json
import argparse
from pathlib import Path
from typing import Dict, Any


class MiniConfigGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è Oracle850B"""

    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–∞
        self.mini_defaults = {
            "n_layers": 8,
            "d_model": 1024,
            "n_heads": 8,
            "d_ff": 4096,
            "experts": 8,
            "topk": 2,
            "vocab_size": 131072,
            "max_seq_len": 8192,
            "param_total": "8B-mini"
        }

    def load_base_config(self, config_path: Path) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def generate_mini_config(self, base_config: Dict[str, Any],
                           layers: int = None, d_model: int = None,
                           heads: int = None, ff: int = None,
                           experts: int = None, topk: int = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–∞"""

        mini_config = base_config.copy()

        # –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        if layers is not None:
            mini_config["dense"]["n_layers"] = layers
        if d_model is not None:
            mini_config["dense"]["d_model"] = d_model
        if heads is not None:
            mini_config["dense"]["n_heads"] = heads
        if ff is not None:
            mini_config["dense"]["d_ff"] = ff
        if experts is not None:
            mini_config["moe"]["experts"] = experts
        if topk is not None:
            mini_config["moe"]["router"]["k"] = topk

        # –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if d_model is not None and experts is not None:
            # –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4x –º–æ–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            mini_config["moe"]["expert_hidden_mult"] = 4.0

        # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if layers is not None and d_model is not None:
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–∏–Ω–∏-–º–æ–¥–µ–ª–∏
            mini_config["param_total"] = f"{layers * d_model * d_model // 1000000}M-mini"

        # –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏
        mini_config["max_seq_len"] = 8192

        return mini_config

    def save_config(self, config: Dict[str, Any], output_path: Path):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥"""
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)

        print(f"–ú–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(f"  –°–ª–æ–∏: {config['dense']['n_layers']}")
        print(f"  –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {config['dense']['d_model']}")
        print(f"  –ì–æ–ª–æ–≤—ã: {config['dense']['n_heads']}")
        print(f"  FF —Ä–∞–∑–º–µ—Ä: {config['dense']['d_ff']}")
        print(f"  –≠–∫—Å–ø–µ—Ä—Ç—ã: {config['moe']['experts']}")
        print(f"  Top-K: {config['moe']['router']['k']}")
        print(f"  –ú–∞–∫—Å –¥–ª–∏–Ω–∞: {config['max_seq_len']}")

    def generate_runpod_bootstrap(self, output_dir: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è bootstrap —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è RunPod"""

        bootstrap_script = """#!/bin/bash
# Oracle850B RunPod Bootstrap
# –ú–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥ –¥–ª—è smoke testing

set -e

echo "üöÄ Oracle850B RunPod Bootstrap..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
sudo apt-get update && sudo apt-get install -y git jq ripgrep

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python3 -m venv /workspace/.venv
source /workspace/.venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip install -U pip wheel
pip install torch==2.4.* deepspeed==0.14.* accelerate==0.34.* \\
    transformers==4.43.* tokenizers==0.19.* \\
    huggingface_hub hf_transfer s5cmd rclone \\
    --no-build-isolation

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone https://github.com/MagistrTheOne/oracle850b-moe.git /workspace/oracle850b
cd /workspace/oracle850b

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
pip install -e . || true

echo "‚úÖ Bootstrap –∑–∞–≤–µ—Ä—à—ë–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–∞ (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω)
if [ -f "configs/model/oracle850b.moe.json" ]; then
    python scripts/make_mini_config.py \\
        --in configs/model/oracle850b.moe.json \\
        --out configs/model/oracle_mini.moe.json \\
        --layers 8 --d_model 1024 --heads 8 --ff 4096 --experts 8 --topk 2

    echo "‚úÖ –ú–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω"
fi
"""

        script_path = output_dir / "runpod_bootstrap.sh"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(bootstrap_script)

        script_path.chmod(0o755)
        print(f"Bootstrap —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")

    def generate_runpod_launch(self, output_dir: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è launch —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è RunPod"""

        launch_script = """#!/bin/bash
# Oracle850B RunPod Launch
# –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–æ–±—É—á–µ–Ω–∏—è –¥–ª—è smoke testing

source /workspace/.venv/bin/activate
cd /workspace/oracle850b

echo "üöÄ –ó–∞–ø—É—Å–∫ Oracle850B –º–∏–Ω–∏-–æ–±—É—á–µ–Ω–∏—è..."

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è accelerate
accelerate config default

# –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
accelerate launch \\
    src/oracle/training/launcher.py \\
    --config configs/training/oracle_mini.yaml \\
    --model-config configs/model/oracle_mini.moe.json \\
    --data datasets/mix/train.jsonl \\
    --val datasets/mix/valid.jsonl \\
    --output checkpoints/oracle850b_mini \\
    --deepspeed configs/deepspeed/zero3_offload.json \\
    --resume auto

echo "‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
"""

        script_path = output_dir / "runpod_launch.sh"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(launch_script)

        script_path.chmod(0o755)
        print(f"Launch —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")


def main():
    parser = argparse.ArgumentParser(description="Oracle850B Mini-Config Generator")
    parser.add_argument("--in", required=True, help="–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--out", required=True, help="–í—ã—Ö–æ–¥–Ω–æ–π –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥")
    parser.add_argument("--layers", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—ë–≤")
    parser.add_argument("--d-model", type=int, help="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏")
    parser.add_argument("--heads", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤")
    parser.add_argument("--ff", type=int, help="–†–∞–∑–º–µ—Ä FF —Å–ª–æ—è")
    parser.add_argument("--experts", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    parser.add_argument("--topk", type=int, help="Top-K —Ä–æ—É—Ç–µ—Ä")
    parser.add_argument("--runpod-scripts", action="store_true", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è RunPod —Å–∫—Ä–∏–ø—Ç–æ–≤")

    args = parser.parse_args()

    generator = MiniConfigGenerator()

    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
    input_path = Path(args.__dict__["in"])
    if not input_path.exists():
        print(f"–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return

    base_config = generator.load_base_config(input_path)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥–∞
    mini_config = generator.generate_mini_config(
        base_config,
        layers=args.layers,
        d_model=args.d_model,
        heads=args.heads,
        ff=args.ff,
        experts=args.experts,
        topk=args.topk
    )

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏–Ω–∏-–∫–æ–Ω—Ñ–∏–≥
    output_path = Path(args.out)
    generator.save_config(mini_config, output_path)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RunPod —Å–∫—Ä–∏–ø—Ç–æ–≤ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.runpod_scripts:
        output_dir = output_path.parent
        generator.generate_runpod_bootstrap(output_dir)
        generator.generate_runpod_launch(output_dir)
        print("RunPod —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")


if __name__ == "__main__":
    main()
