#!/usr/bin/env python3
"""
Oracle850B Hugging Face Upload
–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ HF Hub
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import os
import json
import argparse
from pathlib import Path
from typing import Dict, Any
from datetime import datetime

from huggingface_hub import HfApi, Repository
from huggingface_hub.utils import RepositoryNotFoundError


class OracleHFUploader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Oracle850B –≤ Hugging Face Hub"""
    
    def __init__(self, token: str = None, repo_id: str = None):
        self.token = token or os.getenv("HUGGINGFACE_TOKEN")
        self.repo_id = repo_id or os.getenv("HF_REPO", "MagistrTheOne/oracle850b-moe")
        
        if not self.token:
            raise ValueError("Hugging Face token –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ HUGGINGFACE_TOKEN")
        
        self.api = HfApi(token=self.token)
        
    def create_repository(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ HF Hub"""
        
        try:
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {self.repo_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            try:
                self.api.repo_info(repo_id=self.repo_id, repo_type="model")
                print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {self.repo_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            except RepositoryNotFoundError:
                pass
            
            # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self.api.create_repo(
                repo_id=self.repo_id,
                repo_type="model",
                private=False,
                exist_ok=True
            )
            
            print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {self.repo_id} —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
            return False
    
    def upload_metadata(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        
        try:
            print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Oracle850B...")
            
            # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_dir = Path("temp_hf_upload")
            temp_dir.mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            files_to_upload = [
                ("README.md", "README.md"),
                ("MODEL_CARD.md", "MODEL_CARD.md"),
                ("configs/model/oracle850b.moe.json", "config.json"),
                ("checkpoints/oracle850b/default_system.txt", "default_system.txt"),
                ("checkpoints/oracle850b/default_intro.txt", "default_intro.txt"),
            ]
            
            for src_path, dst_name in files_to_upload:
                src = Path(src_path)
                if src.exists():
                    dst = temp_dir / dst_name
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
                    with open(src, 'r', encoding='utf-8') as f:
                        content = f.read()
                    with open(dst, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    print(f"  ‚úÖ {src_path} -> {dst_name}")
                else:
                    print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {src_path}")
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä
            tokenizer_dir = Path("checkpoints/oracle850b/tokenizer")
            if tokenizer_dir.exists():
                hf_tokenizer_dir = temp_dir / "tokenizer"
                hf_tokenizer_dir.mkdir(exist_ok=True)
                
                for tokenizer_file in tokenizer_dir.glob("*"):
                    if tokenizer_file.is_file():
                        dst_file = hf_tokenizer_dir / tokenizer_file.name
                        with open(tokenizer_file, 'r', encoding='utf-8') as f:
                            content = f.read()
                        with open(dst_file, 'w', encoding='utf-8') as f:
                            f.write(content)
                        print(f"  ‚úÖ tokenizer/{tokenizer_file.name}")
            
            # –°–æ–∑–¥–∞—Ç—å .gitattributes
            gitattributes_content = """*.json linguist-language=JSON
*.txt linguist-language=Text
*.md linguist-language=Markdown
tokenizer/* linguist-vendored
"""
            with open(temp_dir / ".gitattributes", 'w', encoding='utf-8') as f:
                f.write(gitattributes_content)
            
            # –°–æ–∑–¥–∞—Ç—å .gitignore
            gitignore_content = """# Model weights (too large for free tier)
*.bin
*.safetensors
*.pt
*.pth
*.ckpt

# Training artifacts
logs/
checkpoints/oracle850b/step-*/

# Temporary files
.DS_Store
__pycache__/
*.pyc
"""
            with open(temp_dir / ".gitignore", 'w', encoding='utf-8') as f:
                f.write(gitignore_content)
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
            print("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ HF Hub...")
            for file_path in temp_dir.rglob("*"):
                if file_path.is_file():
                    relative_path = file_path.relative_to(temp_dir)
                    
                    with open(file_path, 'rb') as f:
                        self.api.upload_file(
                            path_or_fileobj=f,
                            path_in_repo=str(relative_path),
                            repo_id=self.repo_id,
                            repo_type="model"
                        )
                    
                    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {relative_path}")
            
            # –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            import shutil
            shutil.rmtree(temp_dir)
            
            print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ HF Hub")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def update_repository_info(self) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
            
            # –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å
            self.api.update_repo_visibility(
                repo_id=self.repo_id,
                private=False
            )
            
            # –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
            self.api.update_repo_visibility(
                repo_id=self.repo_id,
                private=False
            )
            
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return False
    
    def upload_all(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        
        print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Oracle850B –≤ Hugging Face Hub")
        print("=" * 50)
        
        success = True
        
        # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.create_repository():
            success = False
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if not self.upload_metadata():
            success = False
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not self.update_repository_info():
            success = False
        
        if success:
            print("\n‚úÖ Oracle850B —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ HF Hub!")
            print(f"üîó https://huggingface.co/{self.repo_id}")
            print("üí° –í–µ—Å–∞ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ HF Hub")
        
        return success


def main():
    parser = argparse.ArgumentParser(description="Oracle850B HF Hub Upload")
    parser.add_argument("--token", help="Hugging Face token")
    parser.add_argument("--repo", help="Repository ID")
    parser.add_argument("--create-only", action="store_true", help="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    parser.add_argument("--metadata-only", action="store_true", help="–¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    
    args = parser.parse_args()
    
    uploader = OracleHFUploader(token=args.token, repo_id=args.repo)
    
    if args.create_only:
        success = uploader.create_repository()
    elif args.metadata_only:
        success = uploader.upload_metadata()
    else:
        success = uploader.upload_all()
    
    exit(0 if success else 1)


if __name__ == "__main__":
    main()
