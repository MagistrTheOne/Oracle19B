#!/usr/bin/env python3
"""
Oracle850B Kill Switch
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
Author: MagistrTheOne|–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä|2025
"""

import os
import sys
import json
import argparse
import subprocess
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime


class OracleKillSwitch:
    """Kill Switch –¥–ª—è Oracle850B"""
    
    def __init__(self, config_file: str = "infra/kill_switch_config.json"):
        self.config_file = Path(config_file)
        self.config = self._load_config()
        
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ kill switch"""
        if self.config_file.exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        # –ö–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "kubernetes": {
                "enabled": True,
                "namespace": "oracle850b",
                "resources": [
                    "deployments",
                    "jobs",
                    "pods",
                    "services"
                ]
            },
            "terraform": {
                "enabled": True,
                "state_file": "infra/terraform/terraform.tfstate"
            },
            "monitoring": {
                "enabled": True,
                "alerts": True
            }
        }
    
    def kill_kubernetes_resources(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ Kubernetes —Ä–µ—Å—É—Ä—Å—ã"""
        
        if not self.config["kubernetes"]["enabled"]:
            print("‚ö†Ô∏è  Kubernetes kill switch –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        
        print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        namespace = self.config["kubernetes"]["namespace"]
        resources = self.config["kubernetes"]["resources"]
        
        success = True
        
        for resource in resources:
            try:
                print(f"  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {resource}...")
                
                # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
                cmd = ["kubectl", "get", resource, "-n", namespace, "-o", "name"]
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode != 0:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {resource}: {result.stderr}")
                    success = False
                    continue
                
                resource_names = result.stdout.strip().split('\n')
                if not resource_names or resource_names == ['']:
                    print(f"    ‚úÖ {resource} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                # –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
                for resource_name in resource_names:
                    if resource_name:
                        delete_cmd = ["kubectl", "delete", resource_name, "-n", namespace, "--force"]
                        delete_result = subprocess.run(delete_cmd, capture_output=True, text=True)
                        
                        if delete_result.returncode == 0:
                            print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω: {resource_name}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {resource_name}: {delete_result.stderr}")
                            success = False
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {resource}: {e}")
                success = False
        
        if success:
            print("‚úÖ Kubernetes —Ä–µ—Å—É—Ä—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Kubernetes —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        return success
    
    def kill_terraform_resources(self) -> bool:
        """–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å Terraform —Ä–µ—Å—É—Ä—Å—ã"""
        
        if not self.config["terraform"]["enabled"]:
            print("‚ö†Ô∏è  Terraform kill switch –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        
        print("üîÑ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ Terraform —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        terraform_dir = Path("infra/terraform")
        if not terraform_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Terraform –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        try:
            # –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Terraform
            os.chdir(terraform_dir)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state_cmd = ["terraform", "state", "list"]
            state_result = subprocess.run(state_cmd, capture_output=True, text=True)
            
            if state_result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Terraform")
                return False
            
            if not state_result.stdout.strip():
                print("‚úÖ –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è")
                return True
            
            # –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
            destroy_cmd = ["terraform", "destroy", "-auto-approve"]
            destroy_result = subprocess.run(destroy_cmd, capture_output=True, text=True)
            
            if destroy_result.returncode == 0:
                print("‚úÖ Terraform —Ä–µ—Å—É—Ä—Å—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è Terraform: {destroy_result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Terraform: {e}")
            return False
        finally:
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir("../..")
    
    def kill_monitoring(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        
        if not self.config["monitoring"]["enabled"]:
            print("‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ kill switch –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        
        print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Prometheus
            prometheus_cmd = ["kubectl", "delete", "deployment", "prometheus", "-n", "monitoring", "--ignore-not-found=true"]
            subprocess.run(prometheus_cmd, capture_output=True)
            
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Grafana
            grafana_cmd = ["kubectl", "delete", "deployment", "grafana", "-n", "monitoring", "--ignore-not-found=true"]
            subprocess.run(grafana_cmd, capture_output=True)
            
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def emergency_stop(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–≥–æ"""
        
        print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê ORACLE850B")
        print("=" * 50)
        
        success = True
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Kubernetes
        if not self.kill_kubernetes_resources():
            success = False
        
        # –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å Terraform
        if not self.kill_terraform_resources():
            success = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if not self.kill_monitoring():
            success = False
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_kill_switch()
        
        if success:
            print("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        
        return success
    
    def _log_kill_switch(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é kill switch"""
        
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "action": "kill_switch_activated",
            "config": self.config,
            "status": "completed"
        }
        
        log_file = Path("logs/kill_switch.log")
        log_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
        
        print(f"üìã Kill switch –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: {log_file}")
    
    def pre_flight_check(self) -> Dict[str, Any]:
        """Pre-flight –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        
        print("üîç Pre-flight –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        checks = {
            "kubectl_available": False,
            "terraform_available": False,
            "config_valid": False,
            "resources_accessible": False
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ kubectl
        try:
            result = subprocess.run(["kubectl", "version", "--client"], capture_output=True, text=True)
            checks["kubectl_available"] = result.returncode == 0
        except FileNotFoundError:
            checks["kubectl_available"] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ terraform
        try:
            result = subprocess.run(["terraform", "version"], capture_output=True, text=True)
            checks["terraform_available"] = result.returncode == 0
        except FileNotFoundError:
            checks["terraform_available"] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        checks["config_valid"] = self.config_file.exists()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            result = subprocess.run(["kubectl", "get", "nodes"], capture_output=True, text=True)
            checks["resources_accessible"] = result.returncode == 0
        except:
            checks["resources_accessible"] = False
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for check, status in checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {check}: {status}")
        
        all_passed = all(checks.values())
        if all_passed:
            print("‚úÖ –í—Å–µ pre-flight –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ pre-flight –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        return checks


def main():
    parser = argparse.ArgumentParser(description="Oracle850B Kill Switch")
    parser.add_argument("--emergency-stop", action="store_true", help="–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    parser.add_argument("--kill-k8s", action="store_true", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Kubernetes")
    parser.add_argument("--kill-terraform", action="store_true", help="–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å Terraform")
    parser.add_argument("--kill-monitoring", action="store_true", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    parser.add_argument("--pre-flight", action="store_true", help="Pre-flight –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--config", default="infra/kill_switch_config.json", help="–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª")
    
    args = parser.parse_args()
    
    kill_switch = OracleKillSwitch(args.config)
    
    if args.pre_flight:
        checks = kill_switch.pre_flight_check()
        sys.exit(0 if all(checks.values()) else 1)
    
    success = True
    
    if args.emergency_stop:
        success = kill_switch.emergency_stop()
    else:
        if args.kill_k8s:
            success &= kill_switch.kill_kubernetes_resources()
        
        if args.kill_terraform:
            success &= kill_switch.kill_terraform_resources()
        
        if args.kill_monitoring:
            success &= kill_switch.kill_monitoring()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
